from tutorial_db import Session, TutorialPageContent

def add_tutorial_content_to_database():
    session = Session()
    session.query(TutorialPageContent).delete()

    content_entries = [
        TutorialPageContent(title="INTRODUCTION",
                            content="\nCross-Site Scripting (XSS) is a vulnerability found in web applications that poses a significant threat to user security. In simple terms, it allows attackers to inject malicious scripts into web pages viewed by other users. Now, you might wonder, why is this a big deal? Well, let me explain.\n\nImagine you're browsing your favorite website, maybe a social media platform or an online store. You come across a seemingly harmless link, click on it, and suddenly, your account gets hijacked, or your personal information gets stolen. That's the danger of XSS. It can lead to serious consequences like data theft, session hijacking, website defacement, and even the distribution of malware.\n\nTo understand XSS better, let's break it down a bit. When you visit a website, your browser loads various elements like text, images, and scripts to display the page properly. Now, if an attacker manages to sneak their malicious script into one of these elements, it gets executed in your browser without you even knowing. This gives the attacker the ability to do things like stealing your login credentials, impersonating you, or even taking control of your account.\n\nNow, you might be wondering, how does this happen? Well, there are different types of XSS attacks, but they all essentially work by tricking the website into unknowingly executing the attacker's code. For example, an attacker might craft a malicious link and send it to you via email or social media. When you click on that link, the malicious script gets executed in your browser, giving the attacker access to your information.\n\nSo, why should you care about XSS? Because it's everywhere! Many popular websites and applications are vulnerable to XSS, which means anyone using those platforms could be at risk. That's why it's crucial to understand what XSS is and how to protect yourself against it.\n\nIn this tutorial, we'll cover everything you need to know about XSS, from how it works to how to prevent it. By the end, you'll have the knowledge and tools to keep yourself safe while browsing the web. So, let's dive in and learn more about this important topic!"),

        TutorialPageContent(title="UNDERSTANDING", 
                            content="\nCross-Site Scripting (XSS) occurs when an attacker successfully injects malicious scripts into web applications. These injected scripts are then executed in the browsers of unsuspecting users, leading to potential security breaches and attacks.\nTo understand XSS better, it's essential to know about its three main types:\n\n1. Reflected XSS: \nIn this type of attack, the injected script is reflected off a web server and then executed in the user's browser. This often happens when user input isn't properly sanitized or validated by the server before being included in the web page's response. When a user interacts with a vulnerable input field, such as a search box or URL parameter, the injected script gets executed, potentially compromising their session or stealing sensitive data.\n\n2. Stored XSS: \nAlso known as persistent XSS, this type of attack occurs when the injected script is stored on the server and then executed whenever a user accesses the affected page. Unlike reflected XSS, where the payload is part of the request and response cycle, stored XSS payloads are saved on the server, allowing them to affect multiple users over time. Attackers often exploit vulnerabilities in user-generated content features, such as comment sections or message boards, to plant malicious scripts that execute when other users view the content.\n\n3. DOM-based XSS: \nUnlike reflected and stored XSS, which rely on server-side processing, DOM-based XSS attacks occur entirely on the client side. In these attacks, the payload is injected into the Document Object Model (DOM) of the web page and then executed in the victim's browser. This type of XSS often involves manipulating client-side scripts, such as JavaScript, to modify the DOM and execute malicious code. DOM-based XSS vulnerabilities are challenging to detect and mitigate, as they don't involve server interactions and are specific to the client's browser environment."),

        TutorialPageContent(title="Common apps/websites vulnerable to XSS", 
                            content="\n1. Web Forums:\nMany online forums are vulnerable to XSS attacks, allowing attackers to execute scripts in the context of other users. Forums often contain user-generated content, such as posts, comments, and messages, which may not be properly sanitized or validated by the server. Attackers can exploit this vulnerability to inject malicious scripts into forum pages, potentially compromising user accounts, stealing sensitive information, or spreading malware.\n\n2. Blogging Platforms:\nContent management systems like WordPress or Blogger are susceptible to XSS vulnerabilities, particularly in user-generated content areas. Blogging platforms allow users to create and publish content, including blog posts, comments, and multimedia files. Attackers can exploit XSS vulnerabilities in these platforms by injecting malicious scripts into blog posts, comments, or widgets, leading to various consequences such as data theft, website defacement, or unauthorized access to user accounts.\n\n3. E-commerce Websites:\nOnline shopping sites are frequent targets of XSS attacks due to the interactive nature of their interfaces. Vulnerabilities may exist in search fields, product reviews, user comments sections, or even during the checkout process. Attackers can exploit these vulnerabilities to steal sensitive information, manipulate shopping carts, redirect users to malicious websites, or compromise payment transactions. The dynamic nature of e-commerce websites makes them attractive targets for XSS exploitation.\n\n4. Webmail Service:\nEmail services are prime targets for XSS attacks because they handle sensitive information such as personal correspondence, account credentials, and financial transactions. Attackers can exploit XSS vulnerabilities in webmail interfaces to steal session tokens, intercept email communications, or gain unauthorized access to user accounts. Malicious scripts injected into email messages or attachments can execute in the recipient's browser, compromising their privacy and security.\n\nUnderstanding the susceptibility of these common apps and websites to XSS attacks is crucial for developers, administrators, and end-users. By implementing robust security measures, such as input validation, output encoding, and content security policies, organizations can mitigate the risks associated with XSS vulnerabilities and protect their users' sensitive information. Additionally, raising awareness among users about the potential threats posed by XSS attacks can help prevent exploitation and maintain a secure online environment."),

        TutorialPageContent(title="EXPLOITATION", 
                            content="\nCross-Site Scripting (XSS) vulnerabilities can be exploited by attackers to compromise the security of web applications and their users. Exploiting XSS vulnerabilities typically involves several steps:\n\nIdentifying Vulnerabilities:\nAttackers look for input fields, URLs, and parameters within web applications that are not properly sanitized or validated. These vulnerable entry points provide opportunities for attackers to inject malicious scripts into the application.\n\nCrafting Payloads:\nAttackers craft malicious payloads using JavaScript code to achieve various malicious objectives. These payloads can include scripts designed to steal cookies, redirect users to malicious websites, deface web pages, or perform other harmful actions such as phishing or keylogging.\n\nInjection:\nOnce attackers identify vulnerable input fields or URLs, they inject their malicious payloads into these areas. This injection process involves inserting the crafted JavaScript code into the application's codebase, either directly through input fields or by manipulating URL parameters.\n\nTriggering:\nAfter the malicious payload is injected into the application, it awaits execution triggered by another user accessing the affected page or performing certain actions within the application. When the vulnerable page is loaded or interacted with, the injected payload executes in the victim's browser, carrying out the attacker's intended actions.\n\nBy exploiting XSS vulnerabilities, attackers can compromise the confidentiality, integrity, and availability of web applications and their users' data. Therefore, it is essential for web developers and administrators to implement robust security measures, such as input validation, output encoding, and content security policies, to prevent XSS attacks and protect against potential exploitation. Additionally, educating users about the risks associated with XSS vulnerabilities and encouraging safe browsing practices can help mitigate the impact of XSS attacks and enhance overall security posture."),

        TutorialPageContent(title="XSS Exploitation Tools", 
                            content="\nXSS Exploitation Tools play a crucial role in the realm of cybersecurity, providing developers, security researchers, and penetration testers with essential utilities to assess and fortify web applications against Cross-Site Scripting (XSS) vulnerabilities. These tools are meticulously crafted to identify, exploit, and defend against XSS threats, offering a diverse array of functionalities to enhance security posture.\n\nAt their core, XSS Exploitation Tools empower users to conduct comprehensive vulnerability assessments by scanning web applications for potential XSS weaknesses. Through advanced scanning algorithms and techniques, these tools meticulously analyze web pages, input fields, URLs, and parameters to pinpoint vulnerabilities that could be exploited by malicious actors.\n\nMoreover, XSS Exploitation Tools facilitate the injection of custom payloads into vulnerable web applications, enabling users to simulate real-world attack scenarios and assess the severity of XSS vulnerabilities. By crafting and deploying malicious payloads, security professionals can gauge the impact of potential exploits and evaluate the effectiveness of defensive measures.\n\nFurthermore, these tools often incorporate features for real-time monitoring and detection, allowing users to actively monitor web traffic and identify suspicious behavior indicative of XSS attacks. With capabilities for traffic interception, analysis, and logging, these tools provide invaluable insights into ongoing security threats, empowering users to respond swiftly and decisively to mitigate risks.\n\nIn summary, XSS Exploitation Tools serve as indispensable assets in the arsenal of cybersecurity professionals, offering a comprehensive suite of functionalities to identify, exploit, and defend against XSS vulnerabilities effectively. As we delve deeper into the upcoming chapters, we will explore the intricacies of these tools and uncover their pivotal role in safeguarding web applications against XSS threats."),

        TutorialPageContent(title="XSSer", 
                            content="""\nXsser is an tool for locating and taking advantage of XSS vulnerabilities in web applications. It is a useful tool for penetration testers because it offers a number of capabilities that automate the process of identifying and taking advantage of XSS vulnerabilities.\n\nINSTALLATION:\n    `git clone https://github.com/epsylon/xsser.git`\n    `cd xsser`\n    `./setup.py install`\n\nUSAGE:\n    Launch Xsser: `xsser`\n    For help: `xsser -h`\n    Perform a basic XSS scan on a target URL: `xsser -u <target_url>`\n    Specify a custom User-Agent: `xsser -u <target_url> --user-agent <custom_user_agent>`\n    User a proxy for HTTP requests: `xsser -u <target_url> --proxy http://<proxy_address>:<port>`\n\nEXAMPLE SCENARIO:\n    Suppose we have a web application hosted at "http://example.com/login"\n    Conduct Basic Scan: `xsser -u http://example.com/login`\n    Analyze results: Xsser will analyze the target URL for potential XSS vulnerabilities and display any discovered vulnerabilities\n    Exploit the vulnerabilty: Once a vulnerability is identified, Xsser provides options to exploit it\n    Xsser payload injection: Xsser will inject a payload into the vulnerable parameter and execute it in the context of the target application, demonstrating the exploitation of the XSS vulnerability\n
        """),
        
        TutorialPageContent(title="BeEF-XSS", 
                            content="""\nBeEF-XSS is a tool used for identifying and exploiting vulnerabilities in web browsers. It allows penetration testers to assess the security posture of web applications by targeting client-side vulnerabilities.     \nINSTALLATION:\n    `sudo apt update`\n    `sudo apt install beef-xss`\n\nUSAGE:\n    Start BeEF-XSS: `beef-xss`\n    Access BeEF-XSS: Open a web browser and navigate to `http://localhost:3000/ui/panel`\n    Create user account: Ensure that BeEF-XSS is properly configure and accessible through the web interface. After acecssing the web interface for the first time, you will be prompted to create a new user account. Follow the instructions to set up your account credetials.\n    Configure Hook: BeEF-XSS utilizes a JavaScript hook to establish communication with the target web browsers. Generate and copy the hook script provided by BeEF-XSS.\n    Inject Hook: Inject the hook script into the target web application or webpage. This can be done by adding the script tag with the hook code into the HTML code of the target page.\n\nEXAMPLE SCENARIO:\n    Suppose we have a web application hostead at "http://example.com/login"\n    Generate the hook script in the BeEF-XSS web interface and inject it into the login page of the target application\n    Once the hook script is injected, BeEF-XSS will establish a connection with any user who visits the compromised page\n    Exploit Browser: Below mentioned are some capabilities that BeEF-XSS allows the attacker:\n      * Execute commands in the victim's browser\n      * Capture the browser screenshots\n      * Redirect browser to malicious websites\n      * Gather information about the victim's system and browser\n    Monitor the BeEF-XSS dashboard for information gathered from the exploited browsers and analyze the data to understand the extent of the vulnerabilities and potential impact.
        """),

        TutorialPageContent(title="PwnXSS", 
                            content="""\nPwnXSS is a versatile tool designed for testing and exploiting Cross-Site Scripting (XSS) vulnerabilities in web applications. It provides an intuitive interface and powerful features for identifying, exploiting, and demonstrating the impact of XSS vulnerabilities.\n     \n\nINSTALLATION:\n    `pip install bs4`\n    `pip install requests`\n    `git clone https://github.com/pwn0sec/PwnXSS.git`\n    `chmod 755 -R PwnXSS`\n    `cd PwnXSS`\n    `python3 pwnxss.py --help`\n\nThe scanner is a script is written in Python 3. The results produced by it is generally similar to how almost all the vulnerability scanner works. To run the project via terminal, switch to the projects directory and run the pwnxss.py file. To view for help run `python3 pwnxss.py --help`\n\n\nAn example website to test an attack is given (http://testphp.vulnweb.com)\n\nIMAGE 1: \n\n\nTo run the attack against a URL use the `-u` parameter as show:\npython3 pwnxss.py -u http://testphp.vulnweb.com\n\nIMAGE 2: \n\n\nWith this the scanner will automatically start and start crawling through all the URLs in the website and detect whether XSS vulnerabilities are present or not.\n\nImage given shows the terminal code of how to start the scanner and the continuation of how the scanner runs as it crawls through all the links in the given website where each section is separated by use of asterisks. The INFO part shows information about connection to the websiite, WARNING indicates possibility of a vulnerability found and CRITICAL indicating the vulnerability found withing the given URL filtered by the scanner.\n\nA message displayed shows a WARNING found withing a link with the query: Found link with query: content=inside_contact.htm Maybe a vuln XSS point\n\nAnother scan now displayes a CRITICAL message which indicates that there is a vulnerability.\n\nA first CRITICAL error shows: Detected XSS (POST) at http://testphp.vulnweb.com/search.php?test=query\n\nThe next CRITICAL error shows: Post data: {'searchFor': '<script>prompt(document.cookie)</script>', 'goButton': 'goButton'}\n\nOn inspecting the given website there is a searchbar with a go button.\n\nIMAGE 3: \n\nOn entering the given script from the next error we get a prompt bar which shows us that there is an XSS vulnerability present in the website.                   
        """),

        TutorialPageContent(title="Preventive Measures", 
                            content="\nInput Validation:\nValidate and sanitize all user inputs to prevent malicious scripts from being executed. Implement robust input validation techniques to ensure that only expected and safe inputs are accepted by the web application.\n\nOutput Encoding:\nEncode output data to prevent browsers from interpreting it as executable code. Use encoding methods such as HTML entity encoding or JavaScript escaping to render user-generated content safely within web pages.\n\nContent Security Policy (CSP):\nImplement Content Security Policy (CSP) headers to restrict the sources from which certain types of content can be loaded. CSP helps prevent XSS attacks by specifying approved sources for scripts, stylesheets, and other resources, reducing the risk of unauthorized code execution.\n\nRegular Security Audits:\nRegularly audit your web applications for vulnerabilities and promptly patch any identified issues. Conduct thorough security assessments, including code reviews, penetration testing, and vulnerability scanning, to identify and remediate XSS vulnerabilities in a timely manner.\n\nEducate Users:\nTrain users to be cautious of suspicious links and encourage the use of modern, secure browsers with built-in XSS protection. Provide user education and awareness programs to promote safe browsing practices and minimize the risk of falling victim to XSS attacks."),
    ]

    for entry in content_entries:
        session.add(entry)

    session.commit()

    session.close()
